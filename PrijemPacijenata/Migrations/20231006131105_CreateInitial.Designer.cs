// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrijemPacijenata.Data;

#nullable disable

namespace PrijemPacijenata.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231006131105_CreateInitial")]
    partial class CreateInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DijagnozaPacijent", b =>
                {
                    b.Property<int>("DijagnozeIDDijagnoze")
                        .HasColumnType("int");

                    b.Property<int>("PacijentsIDPacijenta")
                        .HasColumnType("int");

                    b.HasKey("DijagnozeIDDijagnoze", "PacijentsIDPacijenta");

                    b.HasIndex("PacijentsIDPacijenta");

                    b.ToTable("DijagnozaPacijent");
                });

            modelBuilder.Entity("PrijemPacijenata.Dijagnoza", b =>
                {
                    b.Property<int>("IDDijagnoze")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDDijagnoze"));

                    b.Property<string>("ImeDijagnoze")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDDijagnoze");

                    b.ToTable("Dijagnoze");
                });

            modelBuilder.Entity("PrijemPacijenata.Doktor", b =>
                {
                    b.Property<int>("IDDoktora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDDoktora"));

                    b.Property<string>("ImeDoktora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrezimeDoktora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDDoktora");

                    b.ToTable("Doktori");
                });

            modelBuilder.Entity("PrijemPacijenata.Pacijent", b =>
                {
                    b.Property<int>("IDPacijenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDPacijenta"));

                    b.Property<int?>("BrojSobe")
                        .HasColumnType("int");

                    b.Property<int?>("DoktorId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDPacijenta");

                    b.HasIndex("DoktorId");

                    b.ToTable("Pacijenti");
                });

            modelBuilder.Entity("DijagnozaPacijent", b =>
                {
                    b.HasOne("PrijemPacijenata.Dijagnoza", null)
                        .WithMany()
                        .HasForeignKey("DijagnozeIDDijagnoze")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrijemPacijenata.Pacijent", null)
                        .WithMany()
                        .HasForeignKey("PacijentsIDPacijenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrijemPacijenata.Pacijent", b =>
                {
                    b.HasOne("PrijemPacijenata.Doktor", "Doktor")
                        .WithMany("Pacijenti")
                        .HasForeignKey("DoktorId");

                    b.Navigation("Doktor");
                });

            modelBuilder.Entity("PrijemPacijenata.Doktor", b =>
                {
                    b.Navigation("Pacijenti");
                });
#pragma warning restore 612, 618
        }
    }
}
